package com.mishkaworld.cashpro.utils;

import com.mishkaworld.cashpro.CashProReloaded;
import org.bukkit.entity.Player;

import java.util.UUID;

/**
 * –ö–ª–∞—Å—Å –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤–∞–ª—é—Ç
 * 
 * @author Misha Ermakov
 */
public class CurrencyFormatter {
    
    private final CashProReloaded plugin;
    
    public CurrencyFormatter(CashProReloaded plugin) {
        this.plugin = plugin;
    }
    
    /**
     * –ü–æ–ª—É—á–∏—Ç—å –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –±–∞–ª–∞–Ω—Å –∏–≥—Ä–æ–∫–∞
     */
    public String getFormattedBalance(UUID playerUuid, String currency) {
        long balance = plugin.getCurrencyOperations().getBalance(playerUuid, currency);
        String symbol = getCurrencySymbol(currency);
        return MessageUtils.formatNumber(balance) + " " + symbol;
    }
    
    /**
     * –ü–æ–ª—É—á–∏—Ç—å –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –±–∞–ª–∞–Ω—Å –∏–≥—Ä–æ–∫–∞ –ø–æ –∏–º–µ–Ω–∏
     */
    public String getFormattedBalance(String playerName, String currency) {
        Player player = plugin.getServer().getPlayer(playerName);
        if (player != null) {
            return getFormattedBalance(player.getUniqueId(), currency);
        }
        return "0 " + getCurrencySymbol(currency);
    }
    
    /**
     * –ü–æ–ª—É—á–∏—Ç—å —Å–∏–º–≤–æ–ª –≤–∞–ª—é—Ç—ã
     */
    public String getCurrencySymbol(String currency) {
        if (currency == null) {
            return "";
        }
        
        switch (currency.toLowerCase()) {
            case "rub":
            case "—Ä—É–±–ª—å":
            case "—Ä—É–±–ª–∏":
                return "‚ÇΩ";
            case "mishka":
            case "–º–∏—à–∫–∞":
            case "–º–∏—à–∫–∏":
                return "üêª";
            default:
                return "";
        }
    }
    
    /**
     * –ü–æ–ª—É—á–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞–ª—é—Ç—ã
     */
    public String getCurrencyName(String currency) {
        if (currency == null) {
            return "";
        }
        
        switch (currency.toLowerCase()) {
            case "rub":
            case "—Ä—É–±–ª—å":
            case "—Ä—É–±–ª–∏":
                return "–†—É–±–ª—å";
            case "mishka":
            case "–º–∏—à–∫–∞":
            case "–º–∏—à–∫–∏":
                return "–ú–∏—à–∫–∞";
            default:
                return currency;
        }
    }
    
    /**
     * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –≤–∞–ª—é—Ç–∞
     */
    public boolean currencyExists(String currency) {
        return plugin.getConfigManager().getCurrencyConfig(currency) != null;
    }
    
    /**
     * –ü–æ–ª—É—á–∏—Ç—å –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å—É–º–º—É —Å —Å–∏–º–≤–æ–ª–æ–º –≤–∞–ª—é—Ç—ã
     */
    public String formatAmount(long amount, String currency) {
        String symbol = getCurrencySymbol(currency);
        return MessageUtils.formatNumber(amount) + " " + symbol;
    }
    
    /**
     * –ü–æ–ª—É—á–∏—Ç—å –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å—É–º–º—É —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º –≤–∞–ª—é—Ç—ã
     */
    public String formatAmountWithName(long amount, String currency) {
        String name = getCurrencyName(currency);
        return MessageUtils.formatNumber(amount) + " " + name;
    }
} 