package com.mishkaworld.cashpro.utils;

/**
 * –£—Ç–∏–ª–∏—Ç–∞—Ä–Ω—ã–π –∫–ª–∞—Å—Å –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
 * 
 * @author Misha Ermakov
 */
public class MessageUtils {
    
    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ü–≤–µ—Ç–æ–≤—ã–º–∏ –∫–æ–¥–∞–º–∏
     * 
     * @param message –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
     * @return –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
     */
    public static String format(String message) {
        if (message == null) {
            return "";
        }
        return translateAlternateColorCodes('&', message);
    }
    
    /**
     * –ó–∞–º–µ–Ω—è–µ—Ç –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ —Ü–≤–µ—Ç–æ–≤—ã–µ –∫–æ–¥—ã –Ω–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ
     * 
     * @param altColorChar —Å–∏–º–≤–æ–ª –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–≥–æ —Ü–≤–µ—Ç–∞
     * @param textToTranslate —Ç–µ–∫—Å—Ç –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞
     * @return —Ç–µ–∫—Å—Ç —Å –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω—ã–º–∏ —Ü–≤–µ—Ç–æ–≤—ã–º–∏ –∫–æ–¥–∞–º–∏
     */
    private static String translateAlternateColorCodes(char altColorChar, String textToTranslate) {
        if (textToTranslate == null) {
            return null;
        }
        
        char[] b = textToTranslate.toCharArray();
        for (int i = 0; i < b.length - 1; i++) {
            if (b[i] == altColorChar && "0123456789AaBbCcDdEeFfKkLlMmNnOoRrXx".indexOf(b[i + 1]) > -1) {
                b[i] = '¬ß';
                b[i + 1] = Character.toLowerCase(b[i + 1]);
            }
        }
        return new String(b);
    }
    
    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–º–µ–Ω–æ–π –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä–æ–≤
     * 
     * @param message –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
     * @param replacements –º–∞—Å—Å–∏–≤ –∑–∞–º–µ–Ω –≤ —Ñ–æ—Ä–º–∞—Ç–µ [–∫–ª—é—á, –∑–Ω–∞—á–µ–Ω–∏–µ, –∫–ª—é—á, –∑–Ω–∞—á–µ–Ω–∏–µ...]
     * @return –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
     */
    public static String format(String message, String... replacements) {
        if (message == null) {
            return "";
        }
        
        String formatted = format(message);
        
        if (replacements != null && replacements.length >= 2) {
            for (int i = 0; i < replacements.length; i += 2) {
                if (i + 1 < replacements.length) {
                    String key = "{" + replacements[i] + "}";
                    String value = replacements[i + 1];
                    formatted = formatted.replace(key, value);
                }
            }
        }
        
        return formatted;
    }
    
    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–º–µ–Ω–æ–π –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä–æ–≤ –¥–ª—è –≤–∞–ª—é—Ç—ã
     * 
     * @param message –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
     * @param amount —Å—É–º–º–∞
     * @param currency –≤–∞–ª—é—Ç–∞
     * @param playerName –∏–º—è –∏–≥—Ä–æ–∫–∞
     * @return –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
     */
    public static String formatCurrency(String message, long amount, String currency, String playerName) {
        String declension = WordDeclension.getDeclension(currency, amount);
        
        return format(message,
            "amount", String.valueOf(amount),
            "currency", currency,
            "declension", declension,
            "player", playerName != null ? playerName : "",
            "symbol", getCurrencySymbol(currency)
        );
    }
    
    /**
     * –ü–æ–ª—É—á–∏—Ç—å —Å–∏–º–≤–æ–ª –≤–∞–ª—é—Ç—ã
     * 
     * @param currency –∫–æ–¥ –≤–∞–ª—é—Ç—ã
     * @return —Å–∏–º–≤–æ–ª –≤–∞–ª—é—Ç—ã
     */
    public static String getCurrencySymbol(String currency) {
        if (currency == null) {
            return "";
        }
        
        switch (currency.toLowerCase()) {
            case "rub":
            case "—Ä—É–±–ª—å":
            case "—Ä—É–±–ª–∏":
                return "‚ÇΩ";
            case "mishka":
            case "–º–∏—à–∫–∞":
            case "–º–∏—à–∫–∏":
                return "üêª";
            default:
                return "";
        }
    }
    
    /**
     * –ü–æ–ª—É—á–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞–ª—é—Ç—ã
     * 
     * @param currency –∫–æ–¥ –≤–∞–ª—é—Ç—ã
     * @return –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞–ª—é—Ç—ã
     */
    public static String getCurrencyName(String currency) {
        if (currency == null) {
            return "";
        }
        
        switch (currency.toLowerCase()) {
            case "rub":
            case "—Ä—É–±–ª—å":
            case "—Ä—É–±–ª–∏":
                return "–†—É–±–ª—å";
            case "mishka":
            case "–º–∏—à–∫–∞":
            case "–º–∏—à–∫–∏":
                return "–ú–∏—à–∫–∞";
            default:
                return currency;
        }
    }
    
    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —á–∏—Å–ª–æ —Å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è–º–∏
     * 
     * @param number —á–∏—Å–ª–æ –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
     * @return –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —á–∏—Å–ª–æ
     */
    public static String formatNumber(long number) {
        return String.format("%,d", number);
    }
    
    /**
     * –°–æ–∑–¥–∞—Ç—å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å–Ω—É—é –ª–∏–Ω–∏—é
     * 
     * @param length –¥–ª–∏–Ω–∞ –ª–∏–Ω–∏–∏
     * @param symbol —Å–∏–º–≤–æ–ª –¥–ª—è –ª–∏–Ω–∏–∏
     * @return —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å–Ω–∞—è –ª–∏–Ω–∏—è
     */
    public static String createLine(int length, String symbol) {
        StringBuilder line = new StringBuilder();
        for (int i = 0; i < length; i++) {
            line.append(symbol);
        }
        return line.toString();
    }
    
    /**
     * –°–æ–∑–¥–∞—Ç—å —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å–Ω—É—é –ª–∏–Ω–∏—é
     * 
     * @return —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å–Ω–∞—è –ª–∏–Ω–∏—è
     */
    public static String createLine() {
        return createLine(50, "=");
    }
    
    /**
     * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Ç—Ä–æ–∫–∞ –ø—É—Å—Ç–æ–π –∏–ª–∏ null
     * 
     * @param str —Å—Ç—Ä–æ–∫–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
     * @return true –µ—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ –ø—É—Å—Ç–∞—è –∏–ª–∏ null
     */
    public static boolean isEmpty(String str) {
        return str == null || str.trim().isEmpty();
    }
    
    /**
     * –ü–æ–ª—É—á–∏—Ç—å –±–µ–∑–æ–ø–∞—Å–Ω—É—é —Å—Ç—Ä–æ–∫—É (–∑–∞–º–µ–Ω—è–µ—Ç null –Ω–∞ –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É)
     * 
     * @param str –∏—Å—Ö–æ–¥–Ω–∞—è —Å—Ç—Ä–æ–∫–∞
     * @return –±–µ–∑–æ–ø–∞—Å–Ω–∞—è —Å—Ç—Ä–æ–∫–∞
     */
    public static String safeString(String str) {
        return str != null ? str : "";
    }
} 